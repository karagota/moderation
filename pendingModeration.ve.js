(function() {
    console.log('‚úÖ pendingModeration.ve.js start');

    const initInterval = setInterval(() => {
        if (window.ve && ve.ui && ve.ui.MWMediaDialog) {
            clearInterval(initInterval);
            applyPatches();
        }
    }, 100);

    function applyPatches() {
        console.log('‚úÖ VE is ready, applying custom patches');

        // –ü–æ–ª–Ω–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
        // if (ve.init && ve.init.Target && ve.init.Target.prototype.showNotification) {
        //     const origShowNotification = ve.init.Target.prototype.showNotification;
        //     ve.init.Target.prototype.showNotification = function(message) {
        //         if (message.message === 'moderation-image-queued') {
        //             console.log('‚ö†Ô∏è Suppressed system notification');
        //             return;
        //         }
        //         origShowNotification.call(this, message);
        //     };
        // }

        // –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        // if (ve.ui.MWUploadBookletLayout && ve.ui.MWUploadBookletLayout.prototype.onUploadError) {
        //     const origOnUploadError = ve.ui.MWUploadBookletLayout.prototype.onUploadError;
        //     ve.ui.MWUploadBookletLayout.prototype.onUploadError = function(error) {
        //         if (error === 'moderation-image-queued') {
        //             console.log('‚ö†Ô∏è Suppressed system notification');
        //             return;
        //         }
        //         origOnUploadError.call(this, error);
        //     };
        // }

        const origSetup = ve.ui.MWMediaDialog.prototype.getSetupProcess;

        ve.ui.MWMediaDialog.prototype.getSetupProcess = function(data) {
            return origSetup.call(this, data)
                .next(() => {
                    if (this.mediaUploadBooklet) {
                        console.log('‚úÖ Attaching upload event handlers');

                        const origCreateUpload = this.mediaUploadBooklet.createUpload;

                        this.mediaUploadBooklet.createUpload = function() {
                            const upload = origCreateUpload.call(this);
                            const booklet = this;

                            const origFinishStashUpload = upload.finishStashUpload;

                            upload.finishStashUpload = function(filekey, filename) {
                                console.log('37:', filekey, filename);
                                return origFinishStashUpload.call(this, filekey, filename)
                                    .then(response => {
                                        console.log('‚öôÔ∏è Upload finished', response);

                                        if (response.upload && response.moderation === 'pending') {
                                            response.result.type = 'pending';
                                            booklet.emit('uploadModerated', response);
                                        }
                                        return response;
                                    })
                                    .catch(error => {
                                        console.log('‚öôÔ∏è Upload error', error);

                                        if (error === 'moderation-image-queued') {
                                            let filename = '';
                                            let filekey = '';

                                            if (booklet.upload) {
                                                console.log('moderation-image-queue', booklet.upload);
                                                filename = booklet.upload.filename || '';

                                                if (booklet.upload.stateDetails &&
                                                    booklet.upload.stateDetails.errors &&
                                                    booklet.upload.stateDetails.errors[0] &&
                                                    booklet.upload.stateDetails.errors[0].data) {

                                                    const errorData = booklet.upload.stateDetails.errors[0].data;
                                                    filekey = errorData.filekey || errorData.sessionkey || '';
                                                }
                                            }

                                            booklet.emit('uploadModerated', {
                                                error: true,
                                                result: {
                                                    filename: filename,
                                                    filekey: filekey
                                                }
                                            });
                                        }
                                        return Promise.reject(error);
                                    });
                            }.bind(upload);

                            return upload;
                        }.bind(this.mediaUploadBooklet);

                        this.mediaUploadBooklet.on('uploadModerated', (response) => {
                            console.log('üîÑ Upload moderated', response);
                            this.showPendingUpload(response);
                        });
                    }
                });
        };

        ve.ui.MWMediaDialog.prototype.showPendingUpload = function(response) {
            console.log('üîÑ Showing pending upload interface', response);

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞
            const dialog = this;

            // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
            const data = response.error ? {
                fileName: response.result.filename,
                moderationTempUrl: 'https://wiki.test/images/moderation-icon.jpg'
            } : {
                fileName: response.upload.filename,
                moderationTempUrl: 'https://wiki.test/images/moderation-icon.jpg'
            };

            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è –Ω–∞—à–µ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
            const containerClass = 'moderation-pending-container';

            // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä, –µ—Å–ª–∏ –µ—Å—Ç—å
            $(`.${containerClass}`).remove();

            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
            const $container = $('<div>').addClass(containerClass)
                .css({
                    padding: '20px',
                    textAlign: 'center',
                    backgroundColor: '#fff',
                    borderRadius: '4px',
                    boxShadow: '0 2px 10px rgba(0,0,0,0.1)',
                    zIndex: 1000,
                    position: 'relative'
                });

            // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–≤—å—é
            if (data.moderationTempUrl) {
                $container.append(
                    $('<div>').css({margin: '0 auto 15px', maxWidth: '200px'}).append(
                        $('<img>')
                            .attr('src', data.moderationTempUrl)
                            .css({
                                maxWidth: '100%',
                                maxHeight: '150px',
                                display: 'block',
                                margin: '0 auto'
                            })
                    )
                );
            }

            // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            $container.append(
                $('<div>')
                    .addClass('moderation-pending-message')
                    .css({
                        fontSize: '1.2em',
                        marginBottom: '20px',
                        color: '#333'
                    })
                    .text('–í–∞—à —Ñ–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é')
            );

            // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É
            if (data.fileName) {
                $container.append(
                    $('<button>')
                        .addClass('oo-ui-buttonElement-button oo-ui-buttonElement-button-primary')
                        .css({
                            margin: '10px auto',
                            display: 'block',
                            padding: '8px 20px',
                            fontSize: '1em',
                            cursor: 'pointer'
                        })
                        .text('–í—Å—Ç–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É')
                        .on('click', () => {
                            // –û—Å–Ω–æ–≤–Ω–æ–π —Å–ø–æ—Å–æ–±: —á–µ—Ä–µ–∑ target.getSurface()
                            const target = dialog.target;

                            if (target && target.getSurface) {
                                const surface = target.getSurface();

                                if (surface && surface.execute) {
                                    try {
                                        surface.execute('insertContent', `[[File:${data.fileName}]]`);
                                        dialog.close();
                                        return;
                                    } catch (e) {
                                        console.error('Error executing surface.insertContent', e);
                                    }
                                }
                            }

                            // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–±: —á–µ—Ä–µ–∑ fragment.insertContent()
                            if (dialog.getFragment && dialog.getFragment().insertContent) {
                                try {
                                    dialog.getFragment().insertContent(`[[File:${data.fileName}]]`);
                                    dialog.close();
                                    return;
                                } catch (e) {
                                    console.error('Error executing fragment.insertContent', e);
                                }
                            }

                            // –ö—Ä–∞–π–Ω–∏–π –≤–∞—Ä–∏–∞–Ω—Ç: prompt
                            prompt('–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–∞–π–ª', `[[File:${data.fileName}]]`);
                            dialog.close();
                        })
                );
            }

            // –í—Å—Ç–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –≤ –¥–∏–∞–ª–æ–≥
            this.$body.append($container);

            // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            this.title.setLabel('–§–∞–π–ª –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏!');
            console.log('‚úÖ Custom UI added to dialog body');
        };
    }
})();
